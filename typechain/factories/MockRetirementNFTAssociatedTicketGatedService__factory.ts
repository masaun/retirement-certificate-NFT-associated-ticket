/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockRetirementNFTAssociatedTicketGatedService,
  MockRetirementNFTAssociatedTicketGatedServiceInterface,
} from "../MockRetirementNFTAssociatedTicketGatedService";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "accessSpecialContent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifyRetirementNFTAssociatedTicket",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063991bc4a9146037578063af9e8697146051575b600080fd5b603d606b565b604051604891906082565b60405180910390f35b60576070565b604051606291906082565b60405180910390f35b600090565b600090565b607c81609b565b82525050565b6000602082019050609560008301846075565b92915050565b6000811515905091905056fea26469706673582212206df759ac7b82cd4d0be953e0191bf6d0582a07615204fbb841f5790ffc75d77e64736f6c63430008070033";

type MockRetirementNFTAssociatedTicketGatedServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRetirementNFTAssociatedTicketGatedServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRetirementNFTAssociatedTicketGatedService__factory extends ContractFactory {
  constructor(
    ...args: MockRetirementNFTAssociatedTicketGatedServiceConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockRetirementNFTAssociatedTicketGatedService";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockRetirementNFTAssociatedTicketGatedService> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockRetirementNFTAssociatedTicketGatedService>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockRetirementNFTAssociatedTicketGatedService {
    return super.attach(
      address
    ) as MockRetirementNFTAssociatedTicketGatedService;
  }
  connect(
    signer: Signer
  ): MockRetirementNFTAssociatedTicketGatedService__factory {
    return super.connect(
      signer
    ) as MockRetirementNFTAssociatedTicketGatedService__factory;
  }
  static readonly contractName: "MockRetirementNFTAssociatedTicketGatedService";
  public readonly contractName: "MockRetirementNFTAssociatedTicketGatedService";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRetirementNFTAssociatedTicketGatedServiceInterface {
    return new utils.Interface(
      _abi
    ) as MockRetirementNFTAssociatedTicketGatedServiceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRetirementNFTAssociatedTicketGatedService {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockRetirementNFTAssociatedTicketGatedService;
  }
}
