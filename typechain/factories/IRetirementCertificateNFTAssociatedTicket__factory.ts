/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IRetirementCertificateNFTAssociatedTicket,
  IRetirementCertificateNFTAssociatedTicketInterface,
} from "../IRetirementCertificateNFTAssociatedTicket";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRetirementCertificateNFT",
        name: "retirementCertificateNFT",
        type: "address",
      },
    ],
    name: "getRetirementCertificateNFTAssociatedTicketMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "ticketCreator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "ticketNumber",
            type: "uint256",
          },
        ],
        internalType:
          "struct DataTypes.RetirementCertificateNFTAssociatedTicketMetadata",
        name: "_retirementCertificateNFTAssociatedTicketMetadata",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ticketType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ticketTypes",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "mintAmounts",
        type: "uint256[]",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "walletAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ticketType",
        type: "uint256",
      },
    ],
    name: "retirementCertificateNFTAssociatedTicketBalanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "_numberOfRetirementCertificateNFTAssociatedTickets",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "walletAddresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ticketTypes",
        type: "uint256[]",
      },
    ],
    name: "retirementCertificateNFTAssociatedTicketBalanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_numberOfEachRetirementCertificateNFTAssociatedTickets",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRetirementCertificateNFT",
        name: "retirementCertificateNFT",
        type: "address",
      },
    ],
    name: "saveRetirementCertificateNFTAssociatedTicketMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ticketTypes",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "numberOfTickets",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "transferBatchRetirementCertificateNFTAssociatedTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ticketType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfTicket",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "transferRetirementCertificateNFTAssociatedTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IRetirementCertificateNFTAssociatedTicket__factory {
  static readonly abi = _abi;
  static createInterface(): IRetirementCertificateNFTAssociatedTicketInterface {
    return new utils.Interface(
      _abi
    ) as IRetirementCertificateNFTAssociatedTicketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRetirementCertificateNFTAssociatedTicket {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IRetirementCertificateNFTAssociatedTicket;
  }
}
