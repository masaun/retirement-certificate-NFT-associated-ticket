/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface EventsInterface extends utils.Interface {
  contractName: "Events";
  functions: {};

  events: {
    "BatchRetirementNFTAssociatedTicketCreated(address,address,uint256[],uint256[],address,string)": EventFragment;
    "RetirementNFTAssociatedTicketCreated(address,address,uint256,uint256,address,string)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BatchRetirementNFTAssociatedTicketCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RetirementNFTAssociatedTicketCreated"
  ): EventFragment;
}

export type BatchRetirementNFTAssociatedTicketCreatedEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], string, string],
  {
    retirementNFTAssociatedTicket: string;
    to: string;
    ticketTypes: BigNumber[];
    mintAmounts: BigNumber[];
    retirementNFT: string;
    uri: string;
  }
>;

export type BatchRetirementNFTAssociatedTicketCreatedEventFilter =
  TypedEventFilter<BatchRetirementNFTAssociatedTicketCreatedEvent>;

export type RetirementNFTAssociatedTicketCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  {
    retirementNFTAssociatedTicket: string;
    to: string;
    ticketType: BigNumber;
    mintAmount: BigNumber;
    retirementNFT: string;
    uri: string;
  }
>;

export type RetirementNFTAssociatedTicketCreatedEventFilter =
  TypedEventFilter<RetirementNFTAssociatedTicketCreatedEvent>;

export interface Events extends BaseContract {
  contractName: "Events";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BatchRetirementNFTAssociatedTicketCreated(address,address,uint256[],uint256[],address,string)"(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketTypes?: null,
      mintAmounts?: null,
      retirementNFT?: null,
      uri?: null
    ): BatchRetirementNFTAssociatedTicketCreatedEventFilter;
    BatchRetirementNFTAssociatedTicketCreated(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketTypes?: null,
      mintAmounts?: null,
      retirementNFT?: null,
      uri?: null
    ): BatchRetirementNFTAssociatedTicketCreatedEventFilter;

    "RetirementNFTAssociatedTicketCreated(address,address,uint256,uint256,address,string)"(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketType?: null,
      mintAmount?: null,
      retirementNFT?: null,
      uri?: null
    ): RetirementNFTAssociatedTicketCreatedEventFilter;
    RetirementNFTAssociatedTicketCreated(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketType?: null,
      mintAmount?: null,
      retirementNFT?: null,
      uri?: null
    ): RetirementNFTAssociatedTicketCreatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
