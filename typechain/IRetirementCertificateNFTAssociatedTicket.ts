/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type RetirementCertificateNFTAssociatedTicketMetadataStruct = {
    ticketCreator: string;
    ticketNumber: BigNumberish;
  };

  export type RetirementCertificateNFTAssociatedTicketMetadataStructOutput = [
    string,
    BigNumber
  ] & { ticketCreator: string; ticketNumber: BigNumber };
}

export interface IRetirementCertificateNFTAssociatedTicketInterface
  extends utils.Interface {
  contractName: "IRetirementCertificateNFTAssociatedTicket";
  functions: {
    "getRetirementCertificateNFTAssociatedTicketMetadata(address)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[])": FunctionFragment;
    "retirementCertificateNFTAssociatedTicketBalanceOf(address,uint256)": FunctionFragment;
    "retirementCertificateNFTAssociatedTicketBalanceOfBatch(address[],uint256[])": FunctionFragment;
    "saveRetirementCertificateNFTAssociatedTicketMetadata(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRetirementCertificateNFTAssociatedTicketMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "retirementCertificateNFTAssociatedTicketBalanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retirementCertificateNFTAssociatedTicketBalanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "saveRetirementCertificateNFTAssociatedTicketMetadata",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRetirementCertificateNFTAssociatedTicketMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retirementCertificateNFTAssociatedTicketBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retirementCertificateNFTAssociatedTicketBalanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveRetirementCertificateNFTAssociatedTicketMetadata",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRetirementCertificateNFTAssociatedTicket
  extends BaseContract {
  contractName: "IRetirementCertificateNFTAssociatedTicket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRetirementCertificateNFTAssociatedTicketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: CallOverrides
    ): Promise<
      [
        DataTypes.RetirementCertificateNFTAssociatedTicketMetadataStructOutput
      ] & {
        _retirementCertificateNFTAssociatedTicketMetadata: DataTypes.RetirementCertificateNFTAssociatedTicketMetadataStructOutput;
      }
    >;

    mint(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retirementCertificateNFTAssociatedTicketBalanceOf(
      walletAddress: string,
      ticketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber] & {
        _numberOfRetirementCertificateNFTAssociatedTickets: BigNumber;
      }
    >;

    retirementCertificateNFTAssociatedTicketBalanceOfBatch(
      walletAddresses: string[],
      ticketTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[]] & {
        _numberOfEachRetirementCertificateNFTAssociatedTickets: BigNumber[];
      }
    >;

    saveRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getRetirementCertificateNFTAssociatedTicketMetadata(
    retirementCertificateNFT: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.RetirementCertificateNFTAssociatedTicketMetadataStructOutput>;

  mint(
    to: string,
    ticketType: BigNumberish,
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    to: string,
    ticketTypes: BigNumberish[],
    mintAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retirementCertificateNFTAssociatedTicketBalanceOf(
    walletAddress: string,
    ticketType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  retirementCertificateNFTAssociatedTicketBalanceOfBatch(
    walletAddresses: string[],
    ticketTypes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  saveRetirementCertificateNFTAssociatedTicketMetadata(
    retirementCertificateNFT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.RetirementCertificateNFTAssociatedTicketMetadataStructOutput>;

    mint(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    retirementCertificateNFTAssociatedTicketBalanceOf(
      walletAddress: string,
      ticketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retirementCertificateNFTAssociatedTicketBalanceOfBatch(
      walletAddresses: string[],
      ticketTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    saveRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatch(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retirementCertificateNFTAssociatedTicketBalanceOf(
      walletAddress: string,
      ticketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retirementCertificateNFTAssociatedTicketBalanceOfBatch(
      walletAddresses: string[],
      ticketTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retirementCertificateNFTAssociatedTicketBalanceOf(
      walletAddress: string,
      ticketType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retirementCertificateNFTAssociatedTicketBalanceOfBatch(
      walletAddresses: string[],
      ticketTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveRetirementCertificateNFTAssociatedTicketMetadata(
      retirementCertificateNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
