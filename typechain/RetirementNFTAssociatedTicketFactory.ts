/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RetirementNFTAssociatedTicketFactoryInterface
  extends utils.Interface {
  contractName: "RetirementNFTAssociatedTicketFactory";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "TICKET_CREATOR_ROLE()": FunctionFragment;
    "createBatchRetirementNFTAssociatedTicket(address,uint256[],uint256[],address,string)": FunctionFragment;
    "createRetirementNFTAssociatedTicket(address,uint256,uint256,address,string)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rngV2()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vrfCoordinatorV2()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TICKET_CREATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBatchRetirementNFTAssociatedTicket",
    values: [string, BigNumberish[], BigNumberish[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createRetirementNFTAssociatedTicket",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "rngV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinatorV2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TICKET_CREATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatchRetirementNFTAssociatedTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRetirementNFTAssociatedTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rngV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinatorV2",
    data: BytesLike
  ): Result;

  events: {
    "BatchRetirementNFTAssociatedTicketCreated(address,address,uint256[],uint256[],address,string)": EventFragment;
    "RetirementNFTAssociatedTicketCreated(address,address,uint256,uint256,address,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BatchRetirementNFTAssociatedTicketCreated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RetirementNFTAssociatedTicketCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type BatchRetirementNFTAssociatedTicketCreatedEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], string, string],
  {
    retirementNFTAssociatedTicket: string;
    to: string;
    ticketTypes: BigNumber[];
    mintAmounts: BigNumber[];
    retirementNFT: string;
    uri: string;
  }
>;

export type BatchRetirementNFTAssociatedTicketCreatedEventFilter =
  TypedEventFilter<BatchRetirementNFTAssociatedTicketCreatedEvent>;

export type RetirementNFTAssociatedTicketCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  {
    retirementNFTAssociatedTicket: string;
    to: string;
    ticketType: BigNumber;
    mintAmount: BigNumber;
    retirementNFT: string;
    uri: string;
  }
>;

export type RetirementNFTAssociatedTicketCreatedEventFilter =
  TypedEventFilter<RetirementNFTAssociatedTicketCreatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RetirementNFTAssociatedTicketFactory extends BaseContract {
  contractName: "RetirementNFTAssociatedTicketFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RetirementNFTAssociatedTicketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TICKET_CREATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    createBatchRetirementNFTAssociatedTicket(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      retirementNFT: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createRetirementNFTAssociatedTicket(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      retirementNFT: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rngV2(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vrfCoordinatorV2(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  TICKET_CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  createBatchRetirementNFTAssociatedTicket(
    to: string,
    ticketTypes: BigNumberish[],
    mintAmounts: BigNumberish[],
    retirementNFT: string,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createRetirementNFTAssociatedTicket(
    to: string,
    ticketType: BigNumberish,
    mintAmount: BigNumberish,
    retirementNFT: string,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rngV2(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vrfCoordinatorV2(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    TICKET_CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    createBatchRetirementNFTAssociatedTicket(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      retirementNFT: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createRetirementNFTAssociatedTicket(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      retirementNFT: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rngV2(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vrfCoordinatorV2(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BatchRetirementNFTAssociatedTicketCreated(address,address,uint256[],uint256[],address,string)"(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketTypes?: null,
      mintAmounts?: null,
      retirementNFT?: null,
      uri?: null
    ): BatchRetirementNFTAssociatedTicketCreatedEventFilter;
    BatchRetirementNFTAssociatedTicketCreated(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketTypes?: null,
      mintAmounts?: null,
      retirementNFT?: null,
      uri?: null
    ): BatchRetirementNFTAssociatedTicketCreatedEventFilter;

    "RetirementNFTAssociatedTicketCreated(address,address,uint256,uint256,address,string)"(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketType?: null,
      mintAmount?: null,
      retirementNFT?: null,
      uri?: null
    ): RetirementNFTAssociatedTicketCreatedEventFilter;
    RetirementNFTAssociatedTicketCreated(
      retirementNFTAssociatedTicket?: null,
      to?: null,
      ticketType?: null,
      mintAmount?: null,
      retirementNFT?: null,
      uri?: null
    ): RetirementNFTAssociatedTicketCreatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TICKET_CREATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    createBatchRetirementNFTAssociatedTicket(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      retirementNFT: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createRetirementNFTAssociatedTicket(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      retirementNFT: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rngV2(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrfCoordinatorV2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TICKET_CREATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBatchRetirementNFTAssociatedTicket(
      to: string,
      ticketTypes: BigNumberish[],
      mintAmounts: BigNumberish[],
      retirementNFT: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createRetirementNFTAssociatedTicket(
      to: string,
      ticketType: BigNumberish,
      mintAmount: BigNumberish,
      retirementNFT: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rngV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrfCoordinatorV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
